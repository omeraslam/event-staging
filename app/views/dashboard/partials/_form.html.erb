
 <%= form_for(@event, url: event_path(@event)) do |f| %>
  <% if @event.errors.any? %>
    <div class="alert error">
      <h2><%= pluralize(@event.errors.count, "error") %> prohibited this event from being saved:</h2>

      <ul>
      <% @event.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>





<div class="event-registration">


  <div class="input-group" >
      <label> Event Name</label>
      <%= f.text_field :name, :class => 'input-primary', :placeholder => 'Mikes Birthday, etc' %>
  </div>


  <div class="input-group" id="datepairExample">
    <div class="input-group-inline">
      <label> Date</label>
      <%= f.text_field :date_start, :class => 'date start input-primary', :placeholder => 'Date', :value => (@event.date_start.nil? || @event.date_start == '') ? '' : @event.date_start.to_time.strftime("%m/%d/%Y") %>
    </div>

    <div class="input-group-inline">
      <label> Time</label>
      <%= f.text_field :time_start, :class => 'time start input-primary', :placeholder => 'Time' %> 
    </div>
  </div>


  <div class="input-group" id="datepairExample">
    <div class="input-group-inline start-time">
      <label> End Date</label>
      <%= f.text_field :date_end, :class => 'date end input-primary' , :placeholder => 'End date',  :value => (@event.date_end.nil? || @event.date_end == '') ? '' : @event.date_end.to_time.strftime("%m/%d/%Y") %>
    </div>

    <div class="input-group-inline end-time">
      <label> End Time</label>
      <%= f.text_field :time_end, :class => 'time end input-primary' , :placeholder => 'End time' %>
    </div>
  </div>


  <div class="input-group">
      <div class="input-group-inline">
        <label> Location Name</label>
        <%= f.text_field :location_name, :class => 'input-primary controls', :id => 'pac-input', :placeholder => 'ie Hilton Hotel' %>
      </div>  
      <div class="input-group-inline">
        <label> Location Address</label>
        <%= f.text_field :location, :class => 'input-primary controls', :id => 'pac-input', :placeholder => 'ie 10 Main Street' %>
      </div>  
  </div> 

  
    <h5>Event Description</h5> 
    
  <div class="form-element">
    <%= f.text_area :description, :class => 'input-primary', :placeholder => 'Example: Why don\'t you and your friends, get with my friends, and we can be friends!' %>

  </div>

  <h5>Status</h5>

  <%= f.select(:published, [['true', true],['false', false]]) %>

  <%= link_to 'Edit Theme', slugger_path(:slug => @event.slug) %> 
</div>



    <%= f.submit "Update Event", :class => 'btn btn-large' %>
 
<% end %>


<!-- event form end -->


 <script type="text/javascript">
  $(document).ready(function() {


    var validator = $(".edit_event").validate({
      rules: {
        "event[name]": {
          required: true
        }
      },
      messages : {
        "event[name]": 'Please enter an event title'
      }
    });



      $('#datepairExample .time.start').timepicker({
        'showDuration': true,
        'timeFormat': 'g:ia',
        'appendTo': '.start-time'
      });
      $('#datepairExample .time.end').timepicker({
        'showDuration': true,
        'timeFormat': 'g:ia',
        'appendTo': '.end-time'
      });
      $('#datepairExample .date').datepicker({
        onSelect: function(dateText) {
          $('.date').focusout();
        },
        'format': 'dd/mm/yyyy',
        'autoclose': true
      });






initMap();


function initMap() {
  // var map = new google.maps.Map(document.getElementById('map'), {
  //   center: {lat: -33.8688, lng: 151.2195},
  //   zoom: 13
  // });
  //var input = /** @type {!HTMLInputElement} */(
      //document.getElementById('pac-input'));

  // var types = document.getElementById('type-selector');
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  // map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  //var autocomplete = new google.maps.places.Autocomplete(input);
  // autocomplete.bindTo('bounds', map);

  // var infowindow = new google.maps.InfoWindow();
  // var marker = new google.maps.Marker({
  //   map: map,
  //   anchorPoint: new google.maps.Point(0, -29)
  // });

  // autocomplete.addListener('place_changed', function() {
  //   infowindow.close();
  //   marker.setVisible(false);
  //   var place = autocomplete.getPlace();
  //   if (!place.geometry) {
  //     window.alert("Autocomplete's returned place contains no geometry");
  //     return;
  //   }

    // If the place has a geometry, then present it on a map.
    // if (place.geometry.viewport) {
    //   map.fitBounds(place.geometry.viewport);
    // } else {
    //   map.setCenter(place.geometry.location);
    //   map.setZoom(17);  // Why 17? Because it looks good.
    // }
    // marker.setIcon(/** @type {google.maps.Icon} */({
    //   url: place.icon,
    //   size: new google.maps.Size(71, 71),
    //   origin: new google.maps.Point(0, 0),
    //   anchor: new google.maps.Point(17, 34),
    //   scaledSize: new google.maps.Size(35, 35)
    // }));
    // marker.setPosition(place.geometry.location);
    // marker.setVisible(true);

    // var address = '';
    // if (place.address_components) {
    //   address = [
    //     (place.address_components[0] && place.address_components[0].short_name || ''),
    //     (place.address_components[1] && place.address_components[1].short_name || ''),
    //     (place.address_components[2] && place.address_components[2].short_name || '')
    //   ].join(' ');
    // }

    // infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    // infowindow.open(map, marker);
  //});

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  // function setupClickListener(id, types) {
  //   var radioButton = document.getElementById(id);
  //   radioButton.addEventListener('click', function() {
  //     autocomplete.setTypes(types);
  //   });
  // }

  // setupClickListener('changetype-all', []);
  // setupClickListener('changetype-address', ['address']);
  // setupClickListener('changetype-establishment', ['establishment']);
  // setupClickListener('changetype-geocode', ['geocode']);
}







  });
 
 


</script> 
